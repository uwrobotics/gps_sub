"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class ins_t(object):

    __slots__ = ["time", "week", "utcTime", "insStatus", "yaw", "pitch", "roll", "latitude", "longitude", "altitude", "nedVelX", "nedVelY", "nedVelZ", "attUncertainty", "posUncertainty", "velUncertainty"]

    __typenames__ = ["double", "int16_t", "int64_t", "int16_t", "float", "float", "float", "double", "double", "double", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, [3], None, None]

    def __init__(self):
        self.time = 0.0
        """ LCM Type: double
            # GPS time of week in seconds 
        """
        self.week = 0
        """ LCM Type: int16_t 
            # GPS week (week) 
        """
        self.utcTime = 0
        """ LCM Type: int64_t 
            # The current UTC time. The year is given as a signed byte year offset from the year 2000. E.g. 2013 as 13.
                # Fields:       year    month    day    hour    min    sec    ms
                # Byte offset:  0       1        2      3       4      5      6|7 
        """
        self.insStatus = 0
        """ LCM Type: int16_t 
            # INS Status
            # Name		Bit Offset	Format	Description
            # Mode		0			2 bits	Indicates the current mode of the INS filter.
            #								0 = Not tracking. Insufficient dynamic motion to estimate attitude.
            #								1 = Sufficient dynamic motion, but solution not within performance specs.
            #								2 = INS is tracking and operating within specifications.
            # GpsFix	2			1 bit	Indicates whether the GPS has a proper fix
            # Error 	3			4 bits	Sensor measurement error code
            #								0 = No errors detected.
            # 								Name			Bit Offset	Format	Description
            #								Time Error		0			1 bit	High if INS filter loop exceeds 5 ms.
            #								IMU Error		1			1 bit	High if IMU communication error is detected.
            #								Mag/Pres Error	2			1 bit	High if Magnetometer or Pressure sensor error is detected.
            #								GPS Error		3			1 bit	High if GPS communication error is detected.
            #Reserved	7			9 bits	Reserved for future use.
        """
        self.yaw = 0.0
        """ LCM Type: float 
            # Yaw angle relative to true north. (degree)
        """
        self.pitch = 0.0
        """ LCM Type: float 
            # Yaw angle relative to true north (degree)
        """
        self.roll = 0.0
        """ LCM Type: float 
            # Pitch angle relative to horizon (degree)
        """
        self.latitude = 0.0
        """ LCM Type: double 
            # INS solution position in geodetic latitude (degree)
        """
        self.longitude = 0.0
        """ LCM Type: double 
            # INS solution position in geodetic longitude (degree)
        """
        self.altitude = 0.0
        """ LCM Type: double 
            # Height above ellipsoid. (WGS84) (meter)
        """
        self.nedVelX = 0.0
        """ LCM Type: float 
            # INS solution velocity in NED frame. (North) (m/s)
        """
        self.nedVelY = 0.0
        """ LCM Type: float 
            # INS solution velocity in NED frame. (East) (m/s)
        """
        self.nedVelZ = 0.0
        """ LCM Type: float 
            # INS solution velocity in NED frame. (Down) (m/s)
        """
        self.attUncertainty = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: float[3] 
            # Uncertainty in attitude estimate (yaw, pitch and roll in degrees)
        """
        self.posUncertainty = 0.0
        """ LCM Type: float 
            # Uncertainty in position estimate (m)
        """
        self.velUncertainty = 0.0
        """ LCM Type: float 
            # Uncertainty in velocity estimate (m/s)
        """

    def encode(self):
        buf = BytesIO()
        buf.write(ins_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dhqhfffdddfff", self.time, self.week, self.utcTime, self.insStatus, self.yaw, self.pitch, self.roll, self.latitude, self.longitude, self.altitude, self.nedVelX, self.nedVelY, self.nedVelZ))
        buf.write(struct.pack('>3f', *self.attUncertainty[:3]))
        buf.write(struct.pack(">ff", self.posUncertainty, self.velUncertainty))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ins_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ins_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = ins_t()
        self.time, self.week, self.utcTime, self.insStatus, self.yaw, self.pitch, self.roll, self.latitude, self.longitude, self.altitude, self.nedVelX, self.nedVelY, self.nedVelZ = struct.unpack(">dhqhfffdddfff", buf.read(68))
        self.attUncertainty = struct.unpack('>3f', buf.read(12))
        self.posUncertainty, self.velUncertainty = struct.unpack(">ff", buf.read(8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if ins_t in parents: return 0
        tmphash = (0xe95833bb5810d40a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if ins_t._packed_fingerprint is None:
            ins_t._packed_fingerprint = struct.pack(">Q", ins_t._get_hash_recursive([]))
        return ins_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ins_t._get_packed_fingerprint())[0]

